# -*- coding: utf-8 -*-
"""ITreeType.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fFkIglki270dkYR6f5n6NTS23cpOCduU

# **ITreeType.py**
"""

class NodeType:
    def __init__(self, data):
        self.info = data
        self.left = None
        self.right = None

class IterBST():
    def __init__(self):
        self.root = None
        self.order_list = []

    def insert(self, data):
        newNode = NodeType(data)
        parentPtr = self.find(data)
        
        if parentPtr == None:
            self.root = newNode
        elif data < parentPtr.info:
            parentPtr.left = newNode
        else:
            parentPtr.right = newNode


    def find(self, key):
        return self.find_node(self.root, key)

    def find_node(self, root, key):
        nodePtr = root
        parentPtr = None
        found = False
        while (nodePtr != None and not found):
            if key < nodePtr.info:
                parentPtr = nodePtr
                nodePtr = nodePtr.left
            elif key > nodePtr.info:
                parentPtr = nodePtr
                nodePtr = nodePtr.right
            else:
                found = True
        
        return parentPtr

    def delete(self, key):
        self.root = self.delete_node(self.root, key)

    def delete_node(self, node, key):
        if key < node.info:
            node.left = self.delete_node(node.left, key)
        elif key > node.info:
            node.right = self.delete_node(node.right, key)
        else:
            if node.left == None:
                node = node.right
            elif node.right == None:
                node = node.left
            else:
                data = get_predecessor(node.right, data)
                node.info = data
        
        return node

    def inorder(self, node):
        if node != None:
            self.inorder(node.left)
            self.order_list.append(node.info)
            self.inorder( node.right) 
    
    def preorder(self, node):
        if node != None:
            self.order_list.append(node.info)
            self.preorder(node.left)
            self.preorder(node.right)
    
    def postorder(self, node):
        if node != None:
            self.postorder(node.left)
            self.postorder(node.right)
            self.order_list.append(node.info)

    def get_predecessor(tree, data):
        while tree.right != None:
            tree = tree.right
        data = tree.info

        return data